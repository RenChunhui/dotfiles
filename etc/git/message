<type>(<scope>): <summary>

<描述此变更的动机 - 解释为什么要做这个更改，换句话说，为什么你需要这个更改。每行不超过 100 个字符。>

Fixes #<issue number>

# ────────────────────────────────────────── 100 字符 ────────────────────────────────────────────┤


# 示例提交信息
# =======================


# ─── 示例：简单的重构 ─────────────────────────────────────────────────────────────────────────────┤
# refactor(core): 将 refreshDynamicEmbeddedViews 重命名为 refreshEmbeddedViews
#
# 改进代码可读性。原名称不再匹配该函数的实际用途。
# ────────────────────────────────────────────────────────────────────────────────────────────────┤


# ─── 示例：简单的文档更改 ───────────────────────────────────────────────────────────────────────────┤
# docs: 在 providers.md 指南中澄清服务限制
#
# Fixes #36332
# ─────────────────────────────────────────────────────────────────────────────────────────────────┤


# ─── 示例：修复 bug ────────────────────────────────────────────────────────────────────────────────┤
# fix(ngcc): 确保在 `analyzeFn` 失败时移除锁文件
#
# 之前，在 `analyzeFn` 中抛出的错误会导致 ngcc 进程立即退出，且未移除锁文件，可能会
# 在解锁进程成功启动之前就留下孤立的锁文件。
#
# 现在我们捕获这些错误，并根据需要移除锁文件。
#
# Fixes #1234
# ─────────────────────────────────────────────────────────────────────────────────────────────────┤


# ─── 示例：重大更改 ────────────────────────────────────────────────────────────────────────────────┤
# feat(bazel): 通过去除 esm5 和 fesm5 简化 ng_package
#
# esm5 和 fesm5 格式不再需要，且在过去已被弃用。
#
# https://v9.angular.io/guide/deprecations#esm5-and-fesm5-code-formats-in-angular-npm-packages
#
# 此提交修改了 ng_package，使其不再在构建的 npm 包（例如 @angular/core）中分发这两种格式。
#
# 此提交有意不完全清理 ng_package 规则中与 esm5 和 fesm5 构建产物相关的所有内容，
# 因为那是一个更大的清理工作，目前我们将此变更的范围限制为 v10 MVP 所需的
# 变更：即“不要将 esm5 和 fesm5 放入 npm 包中”。
#
# 更多清理工作请参阅：https://angular-team.atlassian.net/browse/FW-2143
#
# BREAKING CHANGE: esm5 和 fesm5 格式不再在 Angular 的 npm 包（如 @angular/core）中分发。
#
# Angular CLI 将自动在启用差异加载的情况下将代码下级加载为 es5，因此用户无需采取任何
# 行动。
#
# 如果你没有使用 Angular CLI 构建应用或库，并且需要能够构建 es5 产物，则需要自行将
# 分发的 Angular 代码降级为 es5。
#
# Fixes #1234
# ─────────────────────────────────────────────────────────────────────────────────────────────────┤



# Angular 提交信息格式
# =============================
#
# Angular 提交信息格式的完整规范可以在以下位置找到：
# https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit
#
# 以下是该规范的一个摘录，包含了常用的部分。
#
# 每个提交信息由 *头部*、*正文* 和 *脚部* 组成。
#
# <header>
# <BLANK LINE>
# <body>
# <BLANK LINE>
# <footer>
#
# 头部是必需的。
#
# 除了文档（docs）类型的提交外，正文是必需的。当正文必需时，正文长度至少应为 20 个字符。
#
# 脚部是可选的。
#
# 提交信息中的任何一行都不能超过 100 个字符。
#
#
# 提交信息头部
# ---------------------
#
# <type>(<scope>): <简短的摘要>
#   │       │             │
#   │       │             └─⫸ 摘要，使用现在时，首字母小写，不以句号结尾。
#   │       │
#   │       └─⫸ 提交范围：animations|bazel|benchpress|common|compiler|compiler-cli|core|
#   │                          elements|forms|http|language-service|localize|platform-browser|
#   │                          platform-browser-dynamic|platform-server|router|service-worker|
#   │                          upgrade|zone.js|packaging|changelog|dev-infra|docs-infra|migrations|
#   │                          ngcc|ve
#   │                          https://github.com/angular/angular/blob/master/CONTRIBUTING.md#scope
#   │
#   └─⫸ 提交类型：build|ci|docs|feat|fix|perf|refactor|style|test
#                     https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type
#
#
# 提交信息正文
# ---------------------
#
# 与摘要一样，正文应使用祈使句式的现在时：“修复”而不是“修复了”或“修复”。
#
# 解释做出此更改的动机。这个提交信息应该解释为什么做这个更改。你可以包括
# 比较之前和当前行为的内容来说明更改的影响。
#
#
# 提交信息脚部
# ---------------------
#
# 脚部可以包含有关重大更改的信息，也是引用 GitHub 问题、Jira 票据和其他 PR 的地方。
#
# ```
# BREAKING CHANGE: <重大更改摘要>
# <BLANK LINE>
# <重大更改描述 + 迁移说明>
# <BLANK LINE>
# <BLANK LINE>
# Fixes #<问题编号>
# ```
#
# 重大更改部分应以“BREAKING CHANGE: ”开头，接着是重大更改的摘要，再加一个空行，
# 并详细描述该更改，包括迁移说明。
